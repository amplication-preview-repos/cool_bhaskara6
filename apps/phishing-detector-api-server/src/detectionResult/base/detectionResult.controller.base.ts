/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectionResultService } from "../detectionResult.service";
import { DetectionResultCreateInput } from "./DetectionResultCreateInput";
import { DetectionResult } from "./DetectionResult";
import { DetectionResultFindManyArgs } from "./DetectionResultFindManyArgs";
import { DetectionResultWhereUniqueInput } from "./DetectionResultWhereUniqueInput";
import { DetectionResultUpdateInput } from "./DetectionResultUpdateInput";
import { CreateDetectionResultInput } from "../CreateDetectionResultInput";

export class DetectionResultControllerBase {
  constructor(protected readonly service: DetectionResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectionResult })
  async createDetectionResult(
    @common.Body() data: DetectionResultCreateInput
  ): Promise<DetectionResult> {
    return await this.service.createDetectionResult({
      data: {
        ...data,

        email: data.email
          ? {
              connect: data.email,
            }
          : undefined,
      },
      select: {
        confidenceScore: true,
        createdAt: true,
        detectionDate: true,

        email: {
          select: {
            id: true,
          },
        },

        id: true,
        isPhishing: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectionResult] })
  @ApiNestedQuery(DetectionResultFindManyArgs)
  async detectionResults(
    @common.Req() request: Request
  ): Promise<DetectionResult[]> {
    const args = plainToClass(DetectionResultFindManyArgs, request.query);
    return this.service.detectionResults({
      ...args,
      select: {
        confidenceScore: true,
        createdAt: true,
        detectionDate: true,

        email: {
          select: {
            id: true,
          },
        },

        id: true,
        isPhishing: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectionResult(
    @common.Param() params: DetectionResultWhereUniqueInput
  ): Promise<DetectionResult | null> {
    const result = await this.service.detectionResult({
      where: params,
      select: {
        confidenceScore: true,
        createdAt: true,
        detectionDate: true,

        email: {
          select: {
            id: true,
          },
        },

        id: true,
        isPhishing: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectionResult(
    @common.Param() params: DetectionResultWhereUniqueInput,
    @common.Body() data: DetectionResultUpdateInput
  ): Promise<DetectionResult | null> {
    try {
      return await this.service.updateDetectionResult({
        where: params,
        data: {
          ...data,

          email: data.email
            ? {
                connect: data.email,
              }
            : undefined,
        },
        select: {
          confidenceScore: true,
          createdAt: true,
          detectionDate: true,

          email: {
            select: {
              id: true,
            },
          },

          id: true,
          isPhishing: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectionResult(
    @common.Param() params: DetectionResultWhereUniqueInput
  ): Promise<DetectionResult | null> {
    try {
      return await this.service.deleteDetectionResult({
        where: params,
        select: {
          confidenceScore: true,
          createdAt: true,
          detectionDate: true,

          email: {
            select: {
              id: true,
            },
          },

          id: true,
          isPhishing: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/detect-phishing")
  @swagger.ApiOkResponse({
    type: CreateDetectionResultInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DetectPhishing(
    @common.Body()
    body: CreateDetectionResultInput
  ): Promise<CreateDetectionResultInput> {
    return this.service.DetectPhishing(body);
  }
}
